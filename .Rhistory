5+2*10
setwd("~/SM-Final/SM-Exercises")
library(RSNNS)
library(devtools)
library(kernlab)
##### Preproccessing #####
source('loadImage.R')
source('Methods.R')
id <- data.frame()
#Get all data from folder
getAllData <- function(dataList){
id <- data.frame()
idList <- list()
for(i in 1:length(dataList))
{
if( length(dataList[[i]]) > 0  ){
for(j in 1:length(dataList[[i]])){
idTemp <- loadSinglePersonsData(100,i - 1, dataList[[i]][j] ,folder)
idList <- append(idList, list(idTemp))
}
}
}
return(idList)
}
folder <- "../StatisticML/preProcessed/2018/group"
datalist <- list(  list( 1) ,list( 1, 2 ), list( 1, 2, 3 ),   list( 1, 2, 3 ), list( 1, 0, 4, 2, 3 ),
list( 1, 5, 4, 2, 3 ), list( 0, 2, 3 ), list( 1 ), list( 1, 2, 3 ), list( 1, 2, 3 ),
list( 1, 2, 3 ), list( 1, 4, 2, 3 ), list( 1, 2, 3 ), list( 1, 2 ), list( 1, 2, 3 ),
list( 1, 2 ), list( 1, 4, 2, 3 ), list( 1, 4, 2, 3 ), list( 1, 2, 3 ))
idList <- getAllData(datalist)
folder <- "../../SML_Data/preProcessed/2018/group"
datalist <- list(  list( 1) ,list( 1, 2 ), list( 1, 2, 3 ),   list( 1, 2, 3 ), list( 1, 0, 4, 2, 3 ),
list( 1, 5, 4, 2, 3 ), list( 0, 2, 3 ), list( 1 ), list( 1, 2, 3 ), list( 1, 2, 3 ),
list( 1, 2, 3 ), list( 1, 4, 2, 3 ), list( 1, 2, 3 ), list( 1, 2 ), list( 1, 2, 3 ),
list( 1, 2 ), list( 1, 4, 2, 3 ), list( 1, 4, 2, 3 ), list( 1, 2, 3 ))
idList <- getAllData(datalist)
for(i in 1:length(idList)){
idTemp <- idList[i]
idTemp <- data.frame(idTemp)
id <- as.data.frame(rbind(id,idTemp))
}
dataset.all <- as.data.frame(id)
#### All Persons in ####
dataset.shuffle <- datasetShuffle(dataset.all)
dataset.train <- dataset.shuffle[1:28000,]           # 70% of 10 persons (28 000)
dataset.validation <- dataset.shuffle[28001:34000,]  # 15% of 10 persons (6 000)
dataset.test <- dataset.shuffle[34001:40000,]        # 15% of 10 persons (6 000)
dataset.train.labels <- factor(dataset.train[,1])
dataset.validation.labels <- factor(dataset.validation[,1])
dataset.test.labels <- factor(dataset.test[,1])
dataset.train <- dataset.train[,-1]
dataset.validation <- dataset.validation[,-1]
dataset.test <- dataset.test[,-1]
lev <- levels(dataset.train.labels) # Number of classes
nnTrainingClass <- matrix(nrow = length(dataset.train.labels), ncol = 10, data = 0) # Create a list probabilities, for all labels
for(i in 1:length(dataset.train.labels)) { # Set probabilities to one for matching class
matchList <- match(lev,toString(dataset.train.labels[i]))
matchList[is.na(matchList)] <- 0
nnTrainingClass[i,] <- matchList
}
trainingClass <- as.data.frame(nnTrainingClass)
lev <- levels(dataset.train.labels) # Number of classes
nnTrainingClass <- matrix(nrow = length(dataset.train.labels), ncol = 10, data = 0) # Create a list probabilities, for all labels
for(i in 1:length(dataset.train.labels)) { # Set probabilities to one for matching class
matchList <- match(lev,toString(dataset.train.labels[i]))
matchList[is.na(matchList)] <- 0
nnTrainingClass[i,] <- matchList
}
trainingClass <- as.data.frame(nnTrainingClass)
#### [lr] Tune Learning Rate ####
# Variables
its <- c(10,20) ## Iterations
# Change to the neuron amount that was best from previous case
neuron <- 30
lr <- 0.2
#### [lr] Tune Learning Rate ####
# Variables
its <- c(10,20) ## Iterations
# Change to the neuron amount that was best from previous case
neuron <- 30
lr <- 0.2
# Train on training data
lr.trainedModels.train <- trainModel(its, lr, neuron, dataset.train, dataset.train.labels)
lr.train.acc.1 <- lr.trainedModels.train$accuracyList
## Runs a model multiple times for each specificed iteration
## To change layers or learnFunc, do it manually in the function
## Learningrate = default 0.2
trainModel <- function(iterations, learningRate, neurons, dataToPredictOn, dataToPredictOnLabel) {
timeList <- c()
accuracyList <- c()
for (j in 1:length(iterations)) {
k <- iterations[j]
time.start <- Sys.time()                         # Change hidden layers here
model <- mlp(dataset.train, trainingClass, size = c(neurons,neurons,neurons),
maxit = k, learnFuncParams = c(learningRate), learnFunc = "Std_Backpropagation")
time.end <- Sys.time()
time.taken <- time.end - time.start
timeList[j] <- time.taken
print(time.end-time.start)
predictions <- predict(model, dataToPredictOn)
#Error over iterations
#plotIterativeError(model)
#Inspiration code from exercise
#Remember to run 'predictions'
responselist <- 0
responselist <- matrix(nrow = length(predictions[,1]), ncol = 1, data = "Na")
for(i in 1:nrow(predictions)) {
responselist[i,] <- toString( which(predictions[i,]==max(predictions[i,])) - 1 )
}
responselist <- data.frame(responselist)
responselist[,1] <- as.factor(responselist[,1])
# Calculating the accuracy
agreement_rbf <- responselist[,1] == dataToPredictOnLabel
#agreement_rbf <- responselist[,1] == dataset.test.labels
table(agreement_rbf)
acc <- prop.table(table(agreement_rbf))
print(acc[2])
accuracyList[j] <- acc[2]
}
return(list("accuracyList" = accuracyList, "timeList" = timeList))
}
#### [lr] Tune Learning Rate ####
# Variables
its <- c(10,20) ## Iterations
# Change to the neuron amount that was best from previous case
neuron <- 30
lr <- 0.2
# Train on training data
lr.trainedModels.train <- trainModel(its, lr, neuron, dataset.train, dataset.train.labels)
lr.train.acc.1 <- lr.trainedModels.train$accuracyList
lr.train.time.1 <- lr.trainedModels.train$timeList
lr <- 0.1
lr.trainedModels.train <- trainModel(its, lr, neuron, dataset.train, dataset.train.labels)
lr.train.acc.2 <- lr.trainedModels.train$accuracyList
lr.train.time.2 <- lr.trainedModels.train$timeList
# Change to the neuron amount that was best from previous case
neuron <- 20
lr <- 0.05
lr.trainedModels.train <- trainModel(its, lr, neuron, dataset.train, dataset.train.labels)
lr.train.acc.3 <- lr.trainedModels.train$accuracyList
lr.train.time.3 <- lr.trainedModels.train$timeList
# Validation Data
lr <- 0.2
lr.trainedModels.validation <- trainModel(ns, lr, neuron, dataset.validation, dataset.validation.labels)
# Validation Data
lr <- 0.2
lr.trainedModels.validation <- trainModel(its, lr, neuron, dataset.validation, dataset.validation.labels)
lr.val.acc.1 <- lr.trainedModels.validation$accuracyList
lr.val.time.2 <- lr.trainedModels.validation$timeList
lr <- 0.1
lr.trainedModels.validation <- trainModel(ns, lr, neuron, dataset.validation, dataset.validation.labels)
lr.val.acc.2 <- lr.trainedModels.validation$accuracyList
lr <- 0.1
lr.trainedModels.validation <- trainModel(its, lr, neuron, dataset.validation, dataset.validation.labels)
lr.val.acc.2 <- lr.trainedModels.validation$accuracyList
lr.val.time.2 <- lr.trainedModels.validation$timeList
lr <- 0.05
lr.trainedModels.validation <- trainModel(its, lr, neuron, dataset.validation, dataset.validation.labels)
lr.val.acc.3 <- lr.trainedModels.validation$accuracyList
lr.val.time.3 <- lr.trainedModels.validation$timeList
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.40,0.70), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.40,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "l")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
# Change x, y to match the plot
legend(16, 0.6, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.8)
# Change x, y to match the plot
legend(14, 0.6, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.8)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.40,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "l")
axis(1, at=its, labels = its)
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
# Change x, y to match the plot
legend(14, 0.6, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.8)
# Change x, y to match the plot
legend(14, 0.65, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.8)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.40,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "p")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
# Change x, y to match the plot
legend(14, 0.65, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.8)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.40,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "l")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
# Change x, y to match the plot
legend(14, 0.7, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.8)
# Change x, y to match the plot
legend(14, 0.7, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.3)
#### [hl] Tune on Hidden Layers ####
# Variables
its <- c(10,20) ## Iterations
# Change x, y to match the plot
legend(14, 0.7, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.4)
# Change x, y to match the plot
legend(14, 0.7, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(14, 0.7, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.30,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "l")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
# Change x, y to match the plot
legend(18, 0.45, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
# Change x, y to match the plot
legend(17, 0.45, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
# Change x, y to match the plot
legend(16, 0.45, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
# Change x, y to match the plot
legend(16, 0.5, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
# Change x, y to match the plot
legend(16, 0.55, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.30,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "p")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
# Change x, y to match the plot
legend(16, 0.55, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.6)
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
# Change x, y to match the plot
legend(16, 0.55, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.55)
# Change x, y to match the plot
legend(16, 0.6, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.55)
# Change x, y to match the plot
legend(16, 0.6, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(16, 0.54, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(17, 0.54, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.30,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "p")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "l")
# Change x, y to match the plot
legend(17, 0.54, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(17.3, 0.54, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(17.3, 0.55, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(17.3, 0.57, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Plot
mainText <- paste("HL =", 3, " N =", neuron)
plot(main = mainText, its,lr.train.acc.1, xlab = "Iterations",
ylab = "Accuracy", col = "blue", ylim=c(0.30,0.80), type = "p")
points(its,lr.train.acc.1, col = "blue", type = "l")
points(its, lr.train.acc.2, col = "purple", type = "p")
points(its, lr.train.acc.2, col = "purple", type = "l")
points(its, lr.train.acc.3, col = "cyan", type = "p")
points(its, lr.train.acc.3, col = "cyan", type = "l")
axis(1, at=its, labels = its)
points(its, lr.val.acc.1, col = "red", type = "p")
points(its, lr.val.acc.1, col = "red", type = "l")
points(its, lr.val.acc.2, col = "orange", type = "p")
points(its, lr.val.acc.2, col = "orange", type = "l")
points(its, lr.val.acc.3, col = "darkgreen", type = "p")
points(its, lr.val.acc.3, col = "darkgreen", type = "l")
# Change x, y to match the plot
legend(17.3, 0.57, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "red"), lty=1, cex=0.5)
# Change x, y to match the plot
legend(17.3, 0.57, legend=c("Training LR=0.2","Training LR=0.1","Training LR=0.05",
"Validation LR= 0.2","Validation LR= 0.1","Validation LR= 0.05"),
col=c("blue", "purple", "cyan", "red", "orange", "darkgreen"), lty=1, cex=0.5)
