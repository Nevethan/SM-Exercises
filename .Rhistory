5+2*10
source("dataLoading.R")
setwd("~/SM-Final/SM-Exercises")
source("dataLoading.R")
folder <- "../../SML_Data/preProcessed/2018/group"
##### No Pre Processing #####
noPreProcessingData <- result
result <- getAllPersonsInData(folder, 2, 70)
noPreProcessingData <- result
crossValidation <- function(data, f, k) {
accuracyList <- list()
accuracyList.mean <- list()
timeList <- list()
timeList.mean <- list()
K <- 1:k
folds <- createFolds(data$train.labels, f)
for (i in K) {
for (j in 1:length(folds)) {
cv.validation <- data$train[folds[[j]],]
cv.train <- data$train[-folds[[j]],]
cv.train.labels <- data$train.labels[-folds[[j]]]
cv.validation.labels <- data$train.labels[folds[[j]]]
time.start <- Sys.time()
model <- knn(cv.train, cv.validation, cv.train.labels,i)
time.end <- Sys.time()
time.taken <- time.end - time.start
timeList[j] <- time.taken
accuracyList[j] <- acc(model, cv.validation.labels)
}
timeList.mean[i] <- mean(timeList)
accuracyList.mean[i] <- mean(accuracyList)
accuracyList <- 0
timeList <- 0
}
return(list("accuracy" = accuracyList.mean, "time" = timeList.mean))
}
crossValidation(noPreProcessingData, 10, 5)
result <- getAllPersonsInData(folder, 2, 50)
noPreProcessingData <- result
result <- getAllPersonsInData(folder, 1, 50)
noPreProcessingData <- result
np.cv.results <- crossValidation(noPreProcessingData, 10, 3)
#plot the speed.cross and accuracy_cross
plot(K, np.cv.results$time, xlab = "Number of K", ylab = "time (seconds)")
#plot the speed.cross and accuracy_cross
plot(1:3, np.cv.results$time, xlab = "Number of K", ylab = "time (seconds)")
plot(1:3, np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy")
result <- getAllPersonsInData(folder, 1, 50)
noPreProcessingData <- result
np.cv.results <- crossValidation(noPreProcessingData, 10, 20)
#plot the speed.cross and accuracy_cross
plot(1:20, np.cv.results$time, xlab = "Number of K", ylab = "time (seconds)")
plot(1:20, np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy")
result <- getAllPersonsInData(folder, 2, 50)
noPreProcessingData <- result
##### CV On noPreProcessingData #####
KNN.k = 20
np.cv.results <- crossValidation(noPreProcessingData, 10, KNN.k)
#plot the speed.cross and accuracy_cross
plot(1:KNN.k, np.cv.results$time, xlab = "Number of K", ylab = "time (seconds)")
plot(1:KNN.k, np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy")
####################### Pre Processing ############################
a.result <- getAllPersonsInData(folder, 5, 70)
####################### Pre Processing ############################
a.result <- getAllPersonsInData(folder, 1, 70)
##### PCA #####
a.pcaData <- a.result
a.pca.obj <- prcomp(a.pcaData$train)
View(a.pca.obj)
require(graphics)
a.PropVariancePCA <- (a.pca.obj$sdev^2)/sum(a.pca.obj$sdev^2) #Part of variacne as a whole.
a.CumuPCA <- cumsum(a.pca.obj$sdev^2)/sum(a.pca.obj$sdev^2) #Total Variance
#Sdev
plot(main = "Standard Deviation of Principle Components", a.pca.obj$sdev[1:20], xlab = "Principle Components", ylab = "Standard Deviations", col = "blue", pch = 4, cex = 2, lwd=3)
lines(a.pca.obj$sdev[1:20], col= "red", lwd = 3)
#Proportion of Variance & cumulative proportion of variance
plot(main = "Proportion of Variance", a.PropVariancePCA[1:20], xlab = "Principle Components", ylab = "Proportion of Variance", col = "blue", pch = 4, cex = 2, lwd=3)
lines(a.PropVariancePCA[1:20], col= "red", lwd = 3)
plot(main = "Cumulative Proportion of Variance", a.CumuPCA[1:20], xlab = "Principle Components", ylab = "Cumulative Proportion of Variance", col = "blue", pch = 4, cex = 2, lwd=3)
lines(a.CumuPCA[1:20], col= "red", lwd = 3)
#Get train and test data from PCA object
a.train.pca <- PCA.obj$x #x = scores vector
#Get train and test data from PCA object
a.train.pca <- a.pca.obj$x #x = scores vector
a.test.pca <- predict(a.pca.obj, a.pcaData$test) #Finding Principle Components in test
View(a.train.pca)
View(a.pcaData)
#Get train and test data from PCA object
a.train.pca <- a.pca.obj$x #x = scores vector
a.test.pca <- predict(a.pca.obj, a.pcaData$test) #Finding Principle Components in test
a.numberOfPCs <- 1:10
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
a.acc(a.pca.model, a.pcaData$test.labels)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:100
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:2
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:20
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:2
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:2
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:10
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:5
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:3
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:10
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
####################### Pre Processing ############################
a.result <- getAllPersonsInData(folder, 5, 70)
##### PCA #####
a.pcaData <- a.result
a.pca.obj <- prcomp(a.pcaData$train)
#Get train and test data from PCA object
a.train.pca <- a.pca.obj$x #x = scores vector
a.test.pca <- predict(a.pca.obj, a.pcaData$test) #Finding Principle Components in test
a.numberOfPCs <- 1:10
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:5
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:20
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
####################### Pre Processing ############################
a.result <- getAllPersonsInData(folder, 20, 70)
##### PCA #####
a.pcaData <- a.result
a.pca.obj <- prcomp(a.pcaData$train)
#Get train and test data from PCA object
a.train.pca <- a.pca.obj$x #x = scores vector
a.test.pca <- predict(a.pca.obj, a.pcaData$test) #Finding Principle Components in test
a.numberOfPCs <- 1:20
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:10
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:30
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
###################################################################
############################ Disjunct #############################
###################################################################
d.result <- getDisjunctData(folder, 5, 70)
a.numberOfPCs <- 1:40
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:10
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.numberOfPCs <- 1:20
a.time.start <- Sys.time()
a.pca.model <- knn(a.train.pca[, a.numberOfPCs], a.test.pca[, a.numberOfPCs],a.pcaData$train.labels,5)
a.time.end <- Sys.time()
#Run time
print(a.time.end - a.time.start)
#Performance
acc(a.pca.model, a.pcaData$test.labels)
a.train.pca
length(a.train.pca)
length(a.train.pca$x)
plot(a.model)
plot(a.pca.model)
plot(model)
####################### Pre Processing ############################
a.result <- getAllPersonsInData(folder, 1, 70)
crossValidation <- function(data, f, k) {
accuracyList <- list()
accuracyList.mean <- list()
timeList <- list()
timeList.mean <- list()
testAccuracy <- list()
K <- 1:k
folds <- createFolds(data$train.labels, f)
for (i in K) {
for (j in 1:length(folds)) {
cv.validation <- data$train[folds[[j]],]
cv.train <- data$train[-folds[[j]],]
cv.train.labels <- data$train.labels[-folds[[j]]]
cv.validation.labels <- data$train.labels[folds[[j]]]
time.start <- Sys.time()
model <- knn(cv.train, cv.validation, cv.train.labels,i)
time.end <- Sys.time()
time.taken <- time.end - time.start
timeList[j] <- time.taken
accuracyList[j] <- acc(model, cv.validation.labels)
}
timeList.mean[i] <- mean(timeList)
accuracyList.mean[i] <- mean(accuracyList)
t.model <- knn(data$train, data$test, data$train.labels,i)
testAccuracy[i] <- acc(t.model, data$test.labels)
accuracyList <- 0
timeList <- 0
}
return(list("accuracy" = accuracyList.mean, "time" = timeList.mean, "test"=testAccuracy))
}
##### No Pre Processing #####
a.noPreProcessingData <- a.result
##### CV On noPreProcessingData #####
KNN.k = 5
a.np.cv.results <- crossValidation(a.noPreProcessingData, 10, KNN.k)
#plot the speed.cross and accuracy_cross
plot(1:KNN.k, a.np.cv.results$time, xlab = "Number of K", ylab = "time (seconds)")
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy")
points(1:KNN.k, a.np.cv.results$test, col= c("blue"))
a.np.cv.results$test
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy", ylim = c(90, 100))
points(1:KNN.k, a.np.cv.results$test, col= c("blue"))
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy", ylim = c(99, 100))
points(1:KNN.k, a.np.cv.results$test, col= c("blue"))
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy", ylim = c(99.5, 100))
points(1:KNN.k, a.np.cv.results$test, col= c("red"))
##### CV On noPreProcessingData #####
KNN.k = 20
a.np.cv.results <- crossValidation(a.noPreProcessingData, 10, KNN.k)
#plot the speed.cross and accuracy_cross
plot(1:KNN.k, a.np.cv.results$time, xlab = "Number of K", ylab = "time (seconds)")
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy", ylim = c(99.5, 100))
points(1:KNN.k, a.np.cv.results$test, col= c("red"))
lines(1:KNN.k, a.np.cv.results$test, col= c("red"))
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy", ylim = c(99, 100))
points(1:KNN.k, a.np.cv.results$test, col= c("red"))
plot(1:KNN.k, a.np.cv.results$accuracy, xlab = "Number of K", ylab = "Accuracy", ylim = c(99.3, 100))
points(1:KNN.k, a.np.cv.results$test, col= c("red"))
lines(1:KNN.k, a.np.cv.results$test, col= c("red"))
lines(1:KNN.k, a.np.cv.results$accuracy, col= c("black"))
