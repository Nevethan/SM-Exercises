responselist[i,] <- toString( which(predictions[i,]==max(predictions[i,])) - 1 )
}
responselist <- data.frame(responselist)
responselist[,j] <- as.factor(responselist[,j])
# Calculating the accuracy
agreement_rbf <- responselist[,1] == dataToPredictOnLabel
#agreement_rbf <- responselist[,1] == dataset.test.labels
table(agreement_rbf)
acc <- prop.table(table(agreement_rbf))
accuracyList[j] <- acc[2]
}
return(list("accuracyList" = accuracyList, "timeList" = timeList))
}
its <- c(10, 20, 30, 40, 50, 60) ## Iterations
lr <- 0.08
neuron <- 10
trainedModels.train <- trainModel3(its, lr, neuron, dataset.train, dataset.train.labels)
## Runs a model multiple times for each specificed iteration
## To change layers or learnFunc, do it manually in the function
## Learningrate = default 0.2
trainModel4 <- function(iterations, learningRate, neurons, dataToPredictOn, dataToPredictOnLabel) {
#timeList <- rep(0, length(iterations))
#accuracyList <- rep(0, length(iterations))
#iterationsList <- rep(0, length(iterations))
timeList <- c()
accuracyList <- c()
for (j in 1:length(iterations)) {
k <- iterations[j]
time.start <- Sys.time()
model <- mlp(dataset.train, trainingClass, size = c(neurons,neurons,neurons),
maxit = k, learnFuncParams = c(learningRate), learnFunc = "Std_Backpropagation")
time.end <- Sys.time()
time.taken <- time.end - time.start
timeList[j] <- time.taken
print(time.end-time.start)
predictions <- predict(model, dataToPredictOn)
#Error over iterations
plotIterativeError(model)
#Inspiration code from exercise
#Remember to run 'predictions'
responselist <- 0
responselist <- matrix(nrow = length(predictions[,j]), ncol = 1, data = "Na")
for(i in 1:nrow(predictions)) {
responselist[i,] <- toString( which(predictions[i,]==max(predictions[i,])) - 1 )
}
responselist <- data.frame(responselist)
responselist[,j] <- as.factor(responselist[,j])
# Calculating the accuracy
agreement_rbf <- responselist[,j] == dataToPredictOnLabel
#agreement_rbf <- responselist[,1] == dataset.test.labels
table(agreement_rbf)
acc <- prop.table(table(agreement_rbf))
accuracyList[j] <- acc[2]
}
return(list("accuracyList" = accuracyList, "timeList" = timeList))
}
its <- c(10, 20, 30, 40, 50, 60) ## Iterations
lr <- 0.08
neuron <- 10
trainedModels.train <- trainModel4(its, lr, neuron, dataset.train, dataset.train.labels)
its <- c(10, 20, 30, 40) ## Iterations
lr <- 0.08
neuron <- 10
trainedModels.train <- trainModel4(its, lr, neuron, dataset.train, dataset.train.labels)
## Runs a model multiple times for each specificed iteration
## To change layers or learnFunc, do it manually in the function
## Learningrate = default 0.2
trainModel5 <- function(iterations, learningRate, neurons, dataToPredictOn, dataToPredictOnLabel) {
#timeList <- rep(0, length(iterations))
#accuracyList <- rep(0, length(iterations))
#iterationsList <- rep(0, length(iterations))
timeList <- c()
accuracyList <- c()
for (j in 1:length(iterations)) {
k <- iterations[j]
time.start <- Sys.time()
model <- mlp(dataset.train, trainingClass, size = c(neurons,neurons,neurons),
maxit = k, learnFuncParams = c(learningRate), learnFunc = "Std_Backpropagation")
time.end <- Sys.time()
time.taken <- time.end - time.start
timeList[j] <- time.taken
print(time.end-time.start)
predictions <- predict(model, dataToPredictOn)
#Error over iterations
#plotIterativeError(model)
#Inspiration code from exercise
#Remember to run 'predictions'
responselist <- 0
responselist <- matrix(nrow = length(predictions[,1]), ncol = 1, data = "Na")
for(i in 1:nrow(predictions)) {
responselist[i,] <- toString( which(predictions[i,]==max(predictions[i,])) - 1 )
}
responselist <- data.frame(responselist)
responselist[,1] <- as.factor(responselist[,1])
# Calculating the accuracy
agreement_rbf <- responselist[,j] == dataToPredictOnLabel
#agreement_rbf <- responselist[,1] == dataset.test.labels
table(agreement_rbf)
acc <- prop.table(table(agreement_rbf))
accuracyList[j] <- acc[2]
}
return(list("accuracyList" = accuracyList, "timeList" = timeList))
}
its <- c(10, 20, 30, 40) ## Iterations
lr <- 0.08
neuron <- 10
its <- c(10, 20, 30, 40) ## Iterations
lr <- 0.08
neuron <- 20
trainedModels.train <- trainModel5(its, lr, neuron, dataset.train, dataset.train.labels)
## Runs a model multiple times for each specificed iteration
## To change layers or learnFunc, do it manually in the function
## Learningrate = default 0.2
trainModel6 <- function(iterations, learningRate, neurons, dataToPredictOn, dataToPredictOnLabel) {
#timeList <- rep(0, length(iterations))
#accuracyList <- rep(0, length(iterations))
#iterationsList <- rep(0, length(iterations))
timeList <- c()
accuracyList <- c()
for (j in 1:length(iterations)) {
k <- iterations[j]
time.start <- Sys.time()
model <- mlp(dataset.train, trainingClass, size = c(neurons,neurons,neurons),
maxit = k, learnFuncParams = c(learningRate), learnFunc = "Std_Backpropagation")
time.end <- Sys.time()
time.taken <- time.end - time.start
timeList[j] <- time.taken
print(time.end-time.start)
predictions <- predict(model, dataToPredictOn)
#Error over iterations
#plotIterativeError(model)
#Inspiration code from exercise
#Remember to run 'predictions'
responselist <- 0
responselist <- matrix(nrow = length(predictions[,1]), ncol = 1, data = "Na")
for(i in 1:nrow(predictions)) {
responselist[i,] <- toString( which(predictions[i,]==max(predictions[i,])) - 1 )
}
responselist <- data.frame(responselist)
responselist[,1] <- as.factor(responselist[,1])
# Calculating the accuracy
agreement_rbf <- responselist[,1] == dataToPredictOnLabel
#agreement_rbf <- responselist[,1] == dataset.test.labels
table(agreement_rbf)
acc <- prop.table(table(agreement_rbf))
accuracyList[j] <- acc[2]
}
return(list("accuracyList" = accuracyList, "timeList" = timeList))
}
its <- c(10, 20, 30, 40) ## Iterations
lr <- 0.08
neuron <- 20
trainedModels.train <- trainModel6(its, lr, neuron, dataset.train, dataset.train.labels)
trainedModels.validation <- trainModel6(its, lr, neuron, dataset.validation, dataset.validation.labels)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3])
points(its,trainedModels.validation$accuracyList, col = colors[1])
lines(trainedModels.train$accuracyList)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3])
lines(trainedModels.train$accuracyList)
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3])
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
lines(its, col = "blue", lwd= 3)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3])
lines(its, col = "blue", lwd= 3)
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
points(its,trainedModels.validation$accuracyList, col = colors[1])
legend(55,95, legend = c())
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3])
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
points(its,trainedModels.validation$accuracyList, col = colors[1])
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], xlim = 50, ylim=90)
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3],  ylim=90)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3],  ylim=c(50,90))
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
points(its,trainedModels.validation$accuracyList, col = colors[1])
legend(55,95, legend = c())
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3])
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90))
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
points(its,trainedModels.validation$accuracyList, col = colors[1])
legend(55,95, legend = c())
lines(trainedModels.train, col = "blue", lwd= 3)
lines(trainedModels.train$;accuracyList, col = "blue", lwd= 3)
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90))
lines(trainedModels.train$accuracyList, col = "blue", lwd= 3)
points(its,trainedModels.validation$accuracyList, col = colors[1])
its <- c(10, 20, 30, 40, 50, 60, 70, 80, 90) ## Iterations
lr <- 0.08
neuron <- 20
trainedModels.train <- trainModel6(its, lr, neuron, dataset.train, dataset.train.labels)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "l")
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, type = "l")
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "l")
axis(1, at=its, labels = its)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "l")
axis(1, at=its, labels = its)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "l")
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, type = "l")
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, )
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
axis(1, at=its, labels = its)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, )
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3 )
points(its,trainedModels.validation$accuracyList, col = colors[1])
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "h")
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, type="h" )
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, type="p" )
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "h")
lines(trainedModels.train$accuracyList, col = colors[3], lwd= 3, type="p" )
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
#trainedModels$accuracyList[]
axis(1, at=its, labels = its)
plot(its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
its <- c(10, 20, 30, 40, 50, 60, 70, 80, 90) ## Iterations
lr <- 0.08
neuron <- 20
trainedModels.validation <- trainModel6(its, lr, neuron, dataset.validation, dataset.validation.labels)
#trainedModels$accuracyList[]
plot(main = "Test"its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
#trainedModels$accuracyList[]
plot(main = "Test", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, L = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
#trainedModels$accuracyList[]
plot(main = "Learning Rate = 0.08, Hidden Layer = 3, Neurons = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(55,95, legend = c())
legend(90, 0.5, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(90, 0.6, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(70, 0.6, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(60, 0.6, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(60, 0.6, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(60, 0.7, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(60, 0.7, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(60, 0.7, legend=c("Validation", "Training"),
col=c("red", "blue"), lty=1:2, cex=0.8)
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations", ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
axis(1, at=its, labels = its)
legend(60, 0.7, legend=c("Validation", "Training"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(60, 0.7, legend=c("Validation", "Training"),
col=c("red", "blue"), lty=1, cex=0.8)
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(60, 0.7, legend=c("Validation", "Training"),
col=c("red", "blue"), lty=1, cex=0.8)
legend(60, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(60, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(60, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
axis(3, at=trainedModels.train$timeList, labels =trainedModels.train$timeList )
#trainedModels$accuracyList[]
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
legend(60, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
#Plot Results
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "b")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "b")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
#Plot Results
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
points(its,trainedModels.train$accuracyList, col = colors[1], type = "l")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
#Plot Results
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(60, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
legend(60, 0.75, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
#Plot Results
plot(main = "LR = 0.08, HL = 3, N = 20", its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
plotResults <- function(learningRate, hiddenLayers) {
plot(main = c("LR = ", learningRate, "HL = ", hiddenLayers, "N = " neuron), its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults <- function(learningRate, hiddenLayers) {
plot(main = c("LR = ", learningRate, "HL = ", hiddenLayers, "N = ", neuron), its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults("0.8", "3")
plotResults <- function(hiddenLayers) {
plot(main = c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron), its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults("0.8", "3")
plotResults()
plotResults(3)
plotResults(3)
plotResults <- function(hiddenLayers) {
mainText <- c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainText, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults(3)
plotResults(4)
plotResults(3)
mainText <- c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
mainText <- c("LR = ", lr, "HL = ", 3, "N = ", neuron)
mainText
mainTextt <- c("LR = ", lr, "HL = ", 3, "N = ", neuron)
print(mainTextt)
mainTextt<- print(mainTextt)
plotResults <- function(hiddenLayers) {
mainText <- c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainTextt, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
mainTextt <- c("LR = ", lr, "HL = ", 21, "N = ", neuron)
mainTextt<- paste(mainTextt)
plotResults <- function(hiddenLayers) {
mainText <- c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainTextt, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults(3)
mainTextt <- c("LR = ", lr, "HL = ", 21, "N = ", neuron)
mainTextt<- paste(mainTextt, sep = " ")
plotResults <- function(hiddenLayers) {
mainText <- c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainTextt, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults(3)
mainTextt <- c("LR = ", lr, "HL = ", 22, "N = ", neuron)
mainTextt<- paste(mainTextt, sep = " ")
plotResults <- function(hiddenLayers) {
mainText <- c("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainTextt, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults(3)
mainText <- "LR = " + lr + " HL = " + 22 + " N = " + neuron
mainText <- "LR = " lr " HL = " 22 " N = " neuron
mainText <- "LR = ", lr, " HL = ", 22, " N = ", neuron
mainTextt <- paste("LR = ", lr, "HL = ", 22, "N = ", neuron)
mainTextt <- paste("LR = ", lr, "HL = ", 22, "N = ", neuron)
plotResults(3)
mainTextt <- paste("LR = ", lr, "HL = ", 22, "N = ", neuron, sep = " ")
plotResults(3)
mainTextt <- paste("LR =", lr, " HL =", 22, " N =", neuron)
plotResults(3)
mainTextt <- cat("LR =", lr, " HL =", 22, " N =", neuron)
plotResults(3)
mainTextt <- cat("LR =", lr, " HL =", 22, " N =", neuron)
mainTextt <- paste("LR =", lr, " HL =", 22, " N =", neuron)
plotResults(3)
plotResults <- function(hiddenLayers) {
mainText <- paste("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainTextt, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults <- function(hiddenLayers) {
mainText <- paste("LR = ", lr, "HL = ", hiddenLayers, "N = ", neuron)
plot(main = mainText, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
plotResults(3)
setwd("~/SM-Final/SM-Exercises")
## For plotting results
plotResults <- function(hiddenLayers) {
mainText <- paste("LR =", lr, " HL =", hiddenLayers, " N =", neuron)
plot(main = mainText, its,trainedModels.train$accuracyList, xlab = "Iterations",
ylab = "Accuracy", col = colors[3], ylim=c(0.50,0.90), type = "p")
points(its,trainedModels.train$accuracyList, col = colors[3], type = "l")
axis(1, at=its, labels = its)
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "p")
points(its,trainedModels.validation$accuracyList, col = colors[1], type = "l")
legend(65, 0.7, legend=c("Training", "Validation"),
col=c("blue", "red"), lty=1, cex=0.8)
}
# Specify hidden layers
plotResults(3)
# Specify hidden layers
plotResults(003)
# Specify hidden layers
plotResults(300)
